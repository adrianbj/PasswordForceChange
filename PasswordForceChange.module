<?php

/**
 * ProcessWire Password Force Change
 * by Adrian Jones
 *
 * Force users to change password the first time they log in
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class PasswordForceChange extends WireData implements Module, ConfigurableModule {

    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "automaticForceChange" => ""
            );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }

    public function init() {
        $this->pages->addHookBefore('saveReady', $this, 'saveUserChecks');
        $this->addHookAfter('PageRender::renderPage', $this, 'profileRedirect'); //to force redirect if they attempt to view any admin page, including the login page, hence no need for the login hook anymore
        //$this->session->addHookAfter('login', $this, 'profileRedirect');
        $this->addHookAfter('Password::setPass', $this, 'passwordChanged');
        $this->addHookAfter('InputfieldPassword::processInput', $this, 'passwordProcessed'); //just for checking if password fields are empty
    }

    public function saveUserChecks(HookEvent $event) {

        $page = $event->arguments[0];

        if($page->template != "user") return; //return now if not user template

        if($page->isNew()){
            if($this->data['automaticForceChange']) $page->force_passwd_change = 1;
        }
        elseif($page->force_passwd_change){ //if force_passwd_change not checked we don't need to worry about whether they have profile-edit permission
            $newuser = $this->users->get($this->input->get->id);
            if(!$newuser->hasPermission("profile-edit")) $this->error("This user does not have profile-edit permission so they won't be able to change their password. You must correct this now.");
        }
        else{
            return;
        }
    }

    public function profileRedirect() {
        if($this->user->force_passwd_change && $this->user->isLoggedin()){
            $this->error("You must change your password and it must not match your last password.");
            /*$f = $this->fields->get("pass");
            $f->collapsed = Inputfield::collapsedNo;
            $f->save();*/
            //if not already on the profile page, redirect to it
            if($this->page->path != $this->config->urls->admin."profile/") $this->session->redirect($this->config->urls->admin."profile/");
        }
    }

    public function passwordChanged() {
        if($this->user->isChanged("pass")){
            /*$f = $this->fields->get("pass");
            $f->collapsed = Inputfield::collapsedYes;
            $f->save();*/
            $this->message("Thank you for changing your password.");
            $this->user->of(false);
            $this->user->force_passwd_change = 0; //uncheck once password has been changed
            $this->user->save();
        }
        else{
            $this->profileRedirect();
        }

    }

    public function passwordProcessed($event) {
        if($event->object->value == ''){
            $this->profileRedirect();
        }

    }


    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputFieldWrapper();

        $f = wire('modules')->get("InputfieldCheckbox");
        $f->attr('name', 'automaticForceChange');
        $f->label = __('Automatic Force Change');
        $f->description = __('If checked, the "Force Password Change" option will be automatically checked for all new users.');
        $f->attr('checked', $data['automaticForceChange'] ? 'checked' : '' );
        $wrapper->add($f);

        return $wrapper;
    }


    public function ___install() {

        //Create force_passwd_change field
        if(!$this->fields->force_passwd_change) {
            $f = new Field();
            $f->type = "FieldtypeCheckbox";
            $f->name = "force_passwd_change";
            $f->label = "Force password change on next login";
            $f->description = "This is used by the Force Password Change module. You can check this at any time to force the user to change their password on next login.";
            $f->notes = "This will be automatically unchecked when the user changes their password.";
            $f->save();

            $user_template = $this->templates->get("user");
            $user_template->fields->add($f);
            $user_template->fields->save();

        }

    }


    public function ___uninstall() {

        //remove force_passwd_change field
        if($this->fields->force_passwd_change) {

            $f = $this->fields->force_passwd_change;

            $user_template = $this->templates->get("user");
            $user_template->fields->remove($f);
            $user_template->fields->save();

            $this->fields->delete($f);

        }

    }

}

